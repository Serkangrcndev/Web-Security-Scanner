'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  AlertTriangle, 
  Shield, 
  ExternalLink, 
  Download, 
  Filter,
  Search,
  ChevronDown,
  ChevronUp
} from 'lucide-react'
import { useScanStore } from '@/store/scanStore'

interface Vulnerability {
  id: number
  title: string
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  location: string
  evidence: string
  scanner_name: string
  timestamp: string
}

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[]
}

export default function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [severityFilter, setSeverityFilter] = useState<string>('all')
  const [expandedVulns, setExpandedVulns] = useState<Set<number>>(new Set())
  const { currentScan } = useScanStore()

  const severityColors = {
    critical: 'bg-danger-100 text-danger-800 border-danger-200',
    high: 'bg-danger-100 text-danger-800 border-danger-200',
    medium: 'bg-warning-100 text-warning-800 border-warning-200',
    low: 'bg-success-100 text-success-800 border-success-200'
  }

  const severityLabels = {
    critical: 'Kritik',
    high: 'Yüksek',
    medium: 'Orta',
    low: 'Düşük'
  }

  const severityIcons = {
    critical: AlertTriangle,
    high: AlertTriangle,
    medium: Shield,
    low: Shield
  }

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.scanner_name.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter
    
    return matchesSearch && matchesSeverity
  })

  const toggleVulnExpansion = (vulnId: number) => {
    const newExpanded = new Set(expandedVulns)
    if (newExpanded.has(vulnId)) {
      newExpanded.delete(vulnId)
    } else {
      newExpanded.add(vulnId)
    }
    setExpandedVulns(newExpanded)
  }

  const getSeverityCount = (severity: string) => {
    return vulnerabilities.filter(v => v.severity === severity).length
  }

  const exportReport = (format: 'json' | 'pdf' | 'excel') => {
    // Simüle edilmiş export işlemi
    console.log(`Exporting report in ${format} format`)
    // Gerçek uygulamada burada API çağrısı yapılır
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="card max-w-6xl mx-auto"
    >
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6">
        <div>
          <h3 className="text-2xl font-bold text-gray-900">
            Güvenlik Açıkları
          </h3>
          <p className="text-gray-600">
            {vulnerabilities.length} güvenlik açığı tespit edildi
          </p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-3 mt-4 lg:mt-0">
          <button
            onClick={() => exportReport('json')}
            className="btn btn-secondary btn-sm"
          >
            <Download className="h-4 w-4 mr-2" />
            JSON Export
          </button>
          <button
            onClick={() => exportReport('pdf')}
            className="btn btn-primary btn-sm"
          >
            <Download className="h-4 w-4 mr-2" />
            PDF Rapor
          </button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-danger-50 border border-danger-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-danger-600">
            {getSeverityCount('critical') + getSeverityCount('high')}
          </div>
          <div className="text-sm text-danger-700">Kritik & Yüksek</div>
        </div>
        <div className="bg-warning-50 border border-warning-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-warning-600">
            {getSeverityCount('medium')}
          </div>
          <div className="text-sm text-warning-700">Orta</div>
        </div>
        <div className="bg-success-50 border border-success-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-success-600">
            {getSeverityCount('low')}
          </div>
          <div className="text-sm text-success-700">Düşük</div>
        </div>
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-gray-600">
            {vulnerabilities.length}
          </div>
          <div className="text-sm text-gray-700">Toplam</div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Güvenlik açığı ara..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input pl-10"
          />
        </div>
        
        <select
          value={severityFilter}
          onChange={(e) => setSeverityFilter(e.target.value)}
          className="input max-w-xs"
        >
          <option value="all">Tüm Severity'ler</option>
          <option value="critical">Kritik</option>
          <option value="high">Yüksek</option>
          <option value="medium">Orta</option>
          <option value="low">Düşük</option>
        </select>
      </div>

      {/* Vulnerabilities List */}
      <div className="space-y-4">
        <AnimatePresence>
          {filteredVulnerabilities.map((vuln, index) => {
            const Icon = severityIcons[vuln.severity]
            const isExpanded = expandedVulns.has(vuln.id)
            
            return (
              <motion.div
                key={vuln.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ delay: index * 0.1 }}
                className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow"
              >
                {/* Header */}
                <div className="bg-white p-4 cursor-pointer" onClick={() => toggleVulnExpansion(vuln.id)}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-start space-x-4">
                      <div className={`p-2 rounded-lg border ${severityColors[vuln.severity]}`}>
                        <Icon className="h-5 w-5" />
                      </div>
                      
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h4 className="font-semibold text-gray-900">{vuln.title}</h4>
                          <span className={`badge ${severityColors[vuln.severity]}`}>
                            {severityLabels[vuln.severity]}
                          </span>
                        </div>
                        
                        <p className="text-gray-600 text-sm mb-2">
                          {vuln.description}
                        </p>
                        
                        <div className="flex items-center space-x-4 text-xs text-gray-500">
                          <span>Scanner: {vuln.scanner_name}</span>
                          <span>Location: {vuln.location}</span>
                          <span>{new Date(vuln.timestamp).toLocaleString('tr-TR')}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {isExpanded ? (
                        <ChevronUp className="h-5 w-5 text-gray-400" />
                      ) : (
                        <ChevronDown className="h-5 w-5 text-gray-400" />
                      )}
                    </div>
                  </div>
                </div>

                {/* Expanded Content */}
                <AnimatePresence>
                  {isExpanded && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: 'auto', opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.3 }}
                      className="bg-gray-50 border-t border-gray-200"
                    >
                      <div className="p-4 space-y-4">
                        {/* Evidence */}
                        <div>
                          <h5 className="font-medium text-gray-900 mb-2">Kanıt</h5>
                          <div className="bg-white p-3 rounded border font-mono text-sm text-gray-800">
                            {vuln.evidence}
                          </div>
                        </div>

                        {/* Recommendations */}
                        <div>
                          <h5 className="font-medium text-gray-900 mb-2">Öneriler</h5>
                          <div className="bg-blue-50 border border-blue-200 rounded p-3">
                            <p className="text-blue-800 text-sm">
                              Bu güvenlik açığını gidermek için gerekli önlemleri alın. 
                              Detaylı çözüm önerileri için premium raporu indirin.
                            </p>
                          </div>
                        </div>

                        {/* Actions */}
                        <div className="flex items-center space-x-3">
                          <button className="btn btn-primary btn-sm">
                            <ExternalLink className="h-4 w-4 mr-2" />
                            Detayları Gör
                          </button>
                          <button className="btn btn-secondary btn-sm">
                            <Download className="h-4 w-4 mr-2" />
                            Çözüm Önerisi
                          </button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            )
          })}
        </AnimatePresence>
      </div>

      {/* Empty State */}
      {filteredVulnerabilities.length === 0 && (
        <div className="text-center py-12">
          <Shield className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Güvenlik açığı bulunamadı
          </h3>
          <p className="text-gray-500">
            {searchTerm || severityFilter !== 'all' 
              ? 'Filtrelerinizi değiştirmeyi deneyin'
              : 'Tüm güvenlik açıkları çözülmüş görünüyor!'
            }
          </p>
        </div>
      )}

      {/* Footer Actions */}
      {vulnerabilities.length > 0 && (
        <div className="mt-8 pt-6 border-t border-gray-200">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
            <div className="text-sm text-gray-600">
              Son güncelleme: {new Date().toLocaleString('tr-TR')}
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={() => exportReport('excel')}
                className="btn btn-success btn-sm"
              >
                <Download className="h-4 w-4 mr-2" />
                Excel Rapor
              </button>
              <button
                onClick={() => exportReport('pdf')}
                className="btn btn-primary btn-sm"
              >
                <Download className="h-4 w-4 mr-2" />
                Detaylı PDF
              </button>
            </div>
          </div>
        </div>
      )}
    </motion.div>
  )
}
